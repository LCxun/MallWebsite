import type { RouteMatch, RouteMeta } from 'oh-router-shared';
import { RouteLocation } from './type';
export declare type MiddlewareContextRoute<M extends RouteMeta = {}> = {
    parent?: MiddlewareContextRoute<M>;
} & RouteMatch<string, M>;
export interface MiddlewareContext<M extends RouteMeta = {}> {
    to: RouteLocation<M>;
    from?: RouteLocation<M>;
}
export declare abstract class Middleware<M extends RouteMeta = {}> {
    register(ctx: MiddlewareContext<M>): boolean;
    abstract handler(ctx: MiddlewareContext<M>, next: () => Promise<any>): Promise<void>;
}
export declare abstract class RouterMiddleware<M extends RouteMeta = {}> {
    protected middlewares: Middleware<M>[];
    constructor(middlewares?: Middleware<M>[]);
    addMiddleware(middlewares: Middleware<M> | Middleware<M>[]): this;
    protected execMiddlewares(ctx: MiddlewareContext<M>, middlewares: Middleware<M>[]): Promise<any>;
}
