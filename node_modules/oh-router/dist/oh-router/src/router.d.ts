import { History, To, Update } from 'history';
import { EventEmitter, RouteMeta, RouteObject } from 'oh-router-shared';
import { Middleware, RouterMiddleware } from './middleware';
import { LocationListener, RouteLocation } from './type';
export interface RouterOptions<M extends RouteMeta = {}> {
    routes: RouteObject<M>[];
    basename?: string;
    history?: History;
    middlewares?: Middleware<M>[];
}
export declare class Router<M extends RouteMeta = {}> extends RouterMiddleware<M> {
    protected routes: RouteObject<M>[];
    history: History;
    basename: string;
    protected lastHistoryUpdate?: Update;
    location?: RouteLocation<M>;
    protected event: EventEmitter;
    constructor(opts: RouterOptions<M>);
    /**
     * This will start route listening and trigger route matching immediately
     */
    start(): this;
    protected onHistoryLocationChange(update: Update, force?: boolean): Promise<void>;
    private matchRoutes;
    /**
     * Add location change listen
     */
    addLocationListener(listener: LocationListener<M>): this;
    /**
     * Remove location change listen
     */
    removeLocationListener(listener: LocationListener<M>): void;
    rematch(): void;
    /**
     * Re -configure the routes, which will immediately trigger the routing matching
     * @param routes The new routes
     */
    setRoutes(routes: RouteObject<M>[]): this;
    /**
     * Gets the current routes configuration
     * @returns Configured route array
     */
    getRoutes(): RouteObject<M>[];
    /**
     * Navigate to a new location
     * @param to The new URL
     * @param opts Other options
     */
    navigate(to: To | number, opts?: {
        /** Replace current location */
        replace?: boolean;
        state?: any;
    }): void;
    /**
     * Return to previous location
     */
    back(): void;
}
